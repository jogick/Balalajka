
Cable_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  0000019a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000e4  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007a  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e3  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000143  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000063  00000000  00000000  000005cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	52 c0       	rjmp	.+164    	; 0xb2 <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a6 36       	cpi	r26, 0x66	; 102
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	02 d0       	rcall	.+4      	; 0x32 <main>
  2e:	79 c0       	rjmp	.+242    	; 0x122 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <main>:
unsigned char tick; // такты таймера
unsigned int time_to_sleep; // таймер для сна
unsigned char state; // текущее состояние системы

int main (){
	DDRB = 0b00011110;
  32:	8e e1       	ldi	r24, 0x1E	; 30
  34:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000001;
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	88 bb       	out	0x18, r24	; 24

	TIMSK0 = (1<<OCIE0A);
  3a:	84 e0       	ldi	r24, 0x04	; 4
  3c:	89 bf       	out	0x39, r24	; 57

	TCCR0A = (1<<WGM01);
  3e:	82 e0       	ldi	r24, 0x02	; 2
  40:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = 1<<CS01 | 1<<CS00;
  42:	93 e0       	ldi	r25, 0x03	; 3
  44:	93 bf       	out	0x33, r25	; 51
	OCR0A = 0x02;
  46:	86 bf       	out	0x36, r24	; 54

	MCUCR = 1 << SM1;
  48:	80 e1       	ldi	r24, 0x10	; 16
  4a:	85 bf       	out	0x35, r24	; 53

	sei();
  4c:	78 94       	sei
  4e:	21 e0       	ldi	r18, 0x01	; 1
	while (1){
		if (out_count == out_timer) {
  50:	80 91 64 00 	lds	r24, 0x0064
  54:	90 91 65 00 	lds	r25, 0x0065
  58:	88 3e       	cpi	r24, 0xE8	; 232
  5a:	93 40       	sbci	r25, 0x03	; 3
  5c:	99 f4       	brne	.+38     	; 0x84 <__SREG__+0x45>
			state = ~(state) & 0x01;
  5e:	80 91 60 00 	lds	r24, 0x0060
  62:	81 70       	andi	r24, 0x01	; 1
  64:	82 27       	eor	r24, r18
  66:	80 93 60 00 	sts	0x0060, r24
			out_count = 0;
  6a:	10 92 65 00 	sts	0x0065, r1
  6e:	10 92 64 00 	sts	0x0064, r1
			time_to_sleep++;
  72:	80 91 61 00 	lds	r24, 0x0061
  76:	90 91 62 00 	lds	r25, 0x0062
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	90 93 62 00 	sts	0x0062, r25
  80:	80 93 61 00 	sts	0x0061, r24
		}
		if (state) {
  84:	80 91 60 00 	lds	r24, 0x0060
  88:	88 23       	and	r24, r24
  8a:	19 f0       	breq	.+6      	; 0x92 <__SREG__+0x53>
			PORTB &= ~(1 << outA);
  8c:	c3 98       	cbi	0x18, 3	; 24
			PORTB |= (1 << outB);
  8e:	c4 9a       	sbi	0x18, 4	; 24
  90:	02 c0       	rjmp	.+4      	; 0x96 <__SREG__+0x57>
		} else {
			PORTB |= (1 << outA);
  92:	c3 9a       	sbi	0x18, 3	; 24
			PORTB &= ~(1 << outB);
  94:	c4 98       	cbi	0x18, 4	; 24

		}


		if (time_to_sleep == tick_to_sleep){
  96:	80 91 61 00 	lds	r24, 0x0061
  9a:	90 91 62 00 	lds	r25, 0x0062
  9e:	88 31       	cpi	r24, 0x18	; 24
  a0:	95 41       	sbci	r25, 0x15	; 21
  a2:	b1 f6       	brne	.-84     	; 0x50 <__SREG__+0x11>
			DDRB = 0x00;
  a4:	17 ba       	out	0x17, r1	; 23
			PORTB = 0x00;
  a6:	18 ba       	out	0x18, r1	; 24
			MCUCR |= 1 << SE;
  a8:	85 b7       	in	r24, 0x35	; 53
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	85 bf       	out	0x35, r24	; 53
			asm("SLEEP");
  ae:	88 95       	sleep
  b0:	cf cf       	rjmp	.-98     	; 0x50 <__SREG__+0x11>

000000b2 <__vector_6>:
		}
	}
}


ISR (TIM0_COMPA_vect) {
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
	out_count++;
  c4:	80 91 64 00 	lds	r24, 0x0064
  c8:	90 91 65 00 	lds	r25, 0x0065
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	90 93 65 00 	sts	0x0065, r25
  d2:	80 93 64 00 	sts	0x0064, r24
	tick = ~(tick) & 0x01;
  d6:	20 91 63 00 	lds	r18, 0x0063
  da:	21 70       	andi	r18, 0x01	; 1
  dc:	31 e0       	ldi	r19, 0x01	; 1
  de:	23 27       	eor	r18, r19
  e0:	20 93 63 00 	sts	0x0063, r18
	
	if ((!(PINB & 0x01)) & (out_count > 200)){
  e4:	26 b3       	in	r18, 0x16	; 22
  e6:	21 70       	andi	r18, 0x01	; 1
  e8:	23 17       	cp	r18, r19
  ea:	81 f0       	breq	.+32     	; 0x10c <__vector_6+0x5a>
  ec:	89 3c       	cpi	r24, 0xC9	; 201
  ee:	91 05       	cpc	r25, r1
  f0:	68 f0       	brcs	.+26     	; 0x10c <__vector_6+0x5a>
		PORTB |= 1 << LED;
  f2:	c1 9a       	sbi	0x18, 1	; 24
		if (tick == 0) {
  f4:	80 91 63 00 	lds	r24, 0x0063
  f8:	81 11       	cpse	r24, r1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__vector_6+0x4e>
			PORTB |= (1<<BUSE);
  fc:	c2 9a       	sbi	0x18, 2	; 24
  fe:	01 c0       	rjmp	.+2      	; 0x102 <__vector_6+0x50>
		} else {
			PORTB &= ~(1<<BUSE);
 100:	c2 98       	cbi	0x18, 2	; 24
		}
		time_to_sleep = 0;
 102:	10 92 62 00 	sts	0x0062, r1
 106:	10 92 61 00 	sts	0x0061, r1
 10a:	02 c0       	rjmp	.+4      	; 0x110 <__vector_6+0x5e>
	} else {
		PORTB &= ~(1 << LED);
 10c:	c1 98       	cbi	0x18, 1	; 24
		PORTB &= ~(1 << BUSE);
 10e:	c2 98       	cbi	0x18, 2	; 24
	}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	3f 91       	pop	r19
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
